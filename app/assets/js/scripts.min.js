/*!
 * fastshell
 * Fiercely quick and opinionated front-ends
 * https://HosseinKarami.github.io/fastshell
 * @author Hossein Karami
 * @version 1.0.5
 * Copyright 2019. MIT licensed.
 */
function cursorphobic(i,o){var t={};t.proximity=0,t.animationDelay=.1,void 0!=o.proximity&&(t.proximity=o.proximity),void 0!=o.animationDelay&&(t.animationDelay=o.animationDelay),t.margin=t.proximity,t.el=document.querySelector(i),t.el.style.transition=t.el.style.transition+" transform "+t.animationDelay+"s",t.elPosition=getPosition(t.el),t.elWidth=t.el.offsetWidth,t.elHeight=t.el.offsetHeight,t.el.onclick=function(){alert("You did it!")},t.moveButton=function(i,o){xPos.innerHTML="X: "+i,yPos.innerHTML="Y: "+o;var e=t.elPosition.y,n=t.elPosition.x+t.elWidth,r=t.elPosition.y+t.elHeight,l=t.elPosition.x,a=t.elPosition.x+t.elWidth/2,s=t.elPosition.y+t.elHeight/2,m=0,y=0;o>e-t.proximity&&o<r+t.proximity&&(i+t.margin>l&&i<a&&(m=i-l+t.margin),i-t.margin<n&&i>a&&(m=i-n-t.margin)),i>l-t.proximity&&i<n+t.proximity&&(o+t.margin>e&&o<s&&(y=o-e+t.margin),o-t.margin<r&&o>s&&(y=o-r-t.margin)),t.el.style.transform="translate("+m+"px, "+y+"px)"},document.addEventListener("mousemove",function(i){o.noMove||t.moveButton(i.clientX,i.clientY)})}function getPosition(i){for(var o=0,t=0;i;)o+=i.offsetLeft-i.scrollLeft+i.clientLeft,t+=i.offsetTop-i.scrollTop+i.clientTop,i=i.offsetParent;return{x:o,y:t}}var xPos=document.querySelector("#xpos"),yPos=document.querySelector("#ypos");
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMuanMiXSwibmFtZXMiOlsiY3Vyc29ycGhvYmljIiwic2VsZWN0b3IiLCJjb25maWciLCJvYmoiLCJwcm94aW1pdHkiLCJhbmltYXRpb25EZWxheSIsInVuZGVmaW5lZCIsIm1hcmdpbiIsImVsIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwic3R5bGUiLCJ0cmFuc2l0aW9uIiwiZWxQb3NpdGlvbiIsImdldFBvc2l0aW9uIiwiZWxXaWR0aCIsIm9mZnNldFdpZHRoIiwiZWxIZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJvbmNsaWNrIiwiYWxlcnQiLCJtb3ZlQnV0dG9uIiwibW91c2VYIiwibW91c2VZIiwieFBvcyIsImlubmVySFRNTCIsInlQb3MiLCJ0IiwieSIsInIiLCJ4IiwiYiIsImwiLCJ4YyIsInljIiwiZHgiLCJkeSIsInRyYW5zZm9ybSIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwibm9Nb3ZlIiwiY2xpZW50WCIsImNsaWVudFkiLCJlbGVtZW50IiwieFBvc2l0aW9uIiwieVBvc2l0aW9uIiwib2Zmc2V0TGVmdCIsInNjcm9sbExlZnQiLCJjbGllbnRMZWZ0Iiwib2Zmc2V0VG9wIiwic2Nyb2xsVG9wIiwiY2xpZW50VG9wIiwib2Zmc2V0UGFyZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUdBLFFBQUFBLGNBQUFDLEVBQUFDLEdBRUEsR0FBQUMsS0FFQUEsR0FBQUMsVUFBQSxFQUNBRCxFQUFBRSxlQUFBLEdBT0FDLFFBQUFKLEVBQUFFLFlBQUFELEVBQUFDLFVBQUFGLEVBQUFFLFdBQ0FFLFFBQUFKLEVBQUFHLGlCQUFBRixFQUFBRSxlQUFBSCxFQUFBRyxnQkFDQUYsRUFBQUksT0FBQUosRUFBQUMsVUFFQUQsRUFBQUssR0FBQUMsU0FBQUMsY0FBQVQsR0FDQUUsRUFBQUssR0FBQUcsTUFBQUMsV0FBQVQsRUFBQUssR0FBQUcsTUFBQUMsV0FBQSxjQUFBVCxFQUFBRSxlQUFBLElBQ0FGLEVBQUFVLFdBQUFDLFlBQUFYLEVBQUFLLElBQ0FMLEVBQUFZLFFBQUFaLEVBQUFLLEdBQUFRLFlBQ0FiLEVBQUFjLFNBQUFkLEVBQUFLLEdBQUFVLGFBQ0FmLEVBQUFLLEdBQUFXLFFBQUEsV0FDQUMsTUFBQSxnQkFHQWpCLEVBQUFrQixXQUFBLFNBQUFDLEVBQUFDLEdBQ0FDLEtBQUFDLFVBQUEsTUFBQUgsRUFDQUksS0FBQUQsVUFBQSxNQUFBRixDQU1BLElBQUFJLEdBQUF4QixFQUFBVSxXQUFBZSxFQUNBQyxFQUFBMUIsRUFBQVUsV0FBQWlCLEVBQUEzQixFQUFBWSxRQUNBZ0IsRUFBQTVCLEVBQUFVLFdBQUFlLEVBQUF6QixFQUFBYyxTQUNBZSxFQUFBN0IsRUFBQVUsV0FBQWlCLEVBQ0FHLEVBQUE5QixFQUFBVSxXQUFBaUIsRUFBQTNCLEVBQUFZLFFBQUEsRUFDQW1CLEVBQUEvQixFQUFBVSxXQUFBZSxFQUFBekIsRUFBQWMsU0FBQSxFQUVBa0IsRUFBQSxFQUNBQyxFQUFBLENBR0FiLEdBQUFJLEVBQUF4QixFQUFBQyxXQUFBbUIsRUFBQVEsRUFBQTVCLEVBQUFDLFlBRUFrQixFQUFBbkIsRUFBQUksT0FBQXlCLEdBQUFWLEVBQUFXLElBQ0FFLEVBQUFiLEVBQUFVLEVBQUE3QixFQUFBSSxRQUVBZSxFQUFBbkIsRUFBQUksT0FBQXNCLEdBQUFQLEVBQUFXLElBQ0FFLEVBQUFiLEVBQUFPLEVBQUExQixFQUFBSSxTQUtBZSxFQUFBVSxFQUFBN0IsRUFBQUMsV0FBQWtCLEVBQUFPLEVBQUExQixFQUFBQyxZQUVBbUIsRUFBQXBCLEVBQUFJLE9BQUFvQixHQUFBSixFQUFBVyxJQUNBRSxFQUFBYixFQUFBSSxFQUFBeEIsRUFBQUksUUFFQWdCLEVBQUFwQixFQUFBSSxPQUFBd0IsR0FBQVIsRUFBQVcsSUFDQUUsRUFBQWIsRUFBQVEsRUFBQTVCLEVBQUFJLFNBS0FKLEVBQUFLLEdBQUFHLE1BQUEwQixVQUFBLGFBQUFGLEVBQUEsT0FBQUMsRUFBQSxPQUdBM0IsU0FBQTZCLGlCQUFBLFlBQUEsU0FBQUMsR0FDQXJDLEVBQUFzQyxRQUNBckMsRUFBQWtCLFdBQUFrQixFQUFBRSxRQUFBRixFQUFBRyxXQU1BLFFBQUE1QixhQUFBNkIsR0FJQSxJQUhBLEdBQUFDLEdBQUEsRUFDQUMsRUFBQSxFQUVBRixHQUNBQyxHQUFBRCxFQUFBRyxXQUFBSCxFQUFBSSxXQUFBSixFQUFBSyxXQUNBSCxHQUFBRixFQUFBTSxVQUFBTixFQUFBTyxVQUFBUCxFQUFBUSxVQUNBUixFQUFBQSxFQUFBUyxZQUdBLFFBQUF0QixFQUFBYyxFQUFBaEIsRUFBQWlCLEdBMUZBLEdBQUFyQixNQUFBZixTQUFBQyxjQUFBLFNBQ0FnQixLQUFBakIsU0FBQUMsY0FBQSIsImZpbGUiOiJzY3JpcHRzLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciB4UG9zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN4cG9zXCIpO1xudmFyIHlQb3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3lwb3NcIik7XG5cbmZ1bmN0aW9uIGN1cnNvcnBob2JpYyhzZWxlY3RvciwgY29uZmlnKSB7XG4gIC8vIHNldHVwXG4gIHZhciBvYmogPSB7fTtcbiAgLy8gb2JqLm1hcmdpbiA9IDA7XG4gIG9iai5wcm94aW1pdHkgPSAwO1xuICBvYmouYW5pbWF0aW9uRGVsYXkgPSAwLjE7XG5cbiAgLy8gb2JqLmxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gIC8vIG9iai5sYWJlbC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gIC8vIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKS5hcHBlbmRDaGlsZChvYmoubGFiZWwpO1xuXG4gIC8vIGlmIChjb25maWcubWFyZ2luICE9IHVuZGVmaW5lZCkgb2JqLm1hcmdpbiA9IGNvbmZpZy5tYXJnaW47XG4gIGlmIChjb25maWcucHJveGltaXR5ICE9IHVuZGVmaW5lZCkgb2JqLnByb3hpbWl0eSA9IGNvbmZpZy5wcm94aW1pdHk7XG4gIGlmIChjb25maWcuYW5pbWF0aW9uRGVsYXkgIT0gdW5kZWZpbmVkKSBvYmouYW5pbWF0aW9uRGVsYXkgPSBjb25maWcuYW5pbWF0aW9uRGVsYXk7XG4gIG9iai5tYXJnaW4gPSBvYmoucHJveGltaXR5O1xuXG4gIG9iai5lbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICBvYmouZWwuc3R5bGUudHJhbnNpdGlvbiA9IG9iai5lbC5zdHlsZS50cmFuc2l0aW9uICsgXCIgdHJhbnNmb3JtIFwiICsgb2JqLmFuaW1hdGlvbkRlbGF5ICsgXCJzXCI7XG4gIG9iai5lbFBvc2l0aW9uID0gZ2V0UG9zaXRpb24ob2JqLmVsKTtcbiAgb2JqLmVsV2lkdGggPSBvYmouZWwub2Zmc2V0V2lkdGg7XG4gIG9iai5lbEhlaWdodCA9IG9iai5lbC5vZmZzZXRIZWlnaHQ7XG4gIG9iai5lbC5vbmNsaWNrID0gZnVuY3Rpb24oKSB7XG4gICAgYWxlcnQoXCJZb3UgZGlkIGl0IVwiKVxuICB9XG5cbiAgb2JqLm1vdmVCdXR0b24gPSBmdW5jdGlvbihtb3VzZVgsIG1vdXNlWSkge1xuICAgIHhQb3MuaW5uZXJIVE1MID0gJ1g6ICcgKyBtb3VzZVg7XG4gICAgeVBvcy5pbm5lckhUTUwgPSAnWTogJyArIG1vdXNlWTtcblxuICAgIC8vIG9iai5sYWJlbC5zdHlsZS5sZWZ0ID0gbW91c2VYICsgJ3B4JztcbiAgICAvLyBvYmoubGFiZWwuc3R5bGUudG9wID0gbW91c2VZICsgJ3B4JztcbiAgICAvLyBvYmoubGFiZWwuaW5uZXJIVE1MID0gXCJZb3UgZ290dGEgYmUgcXVpY2tlciB0aGFuIHRoYXQuXCI7XG5cbiAgICB2YXIgdCA9IG9iai5lbFBvc2l0aW9uLnk7XG4gICAgdmFyIHIgPSBvYmouZWxQb3NpdGlvbi54ICsgb2JqLmVsV2lkdGg7XG4gICAgdmFyIGIgPSBvYmouZWxQb3NpdGlvbi55ICsgb2JqLmVsSGVpZ2h0O1xuICAgIHZhciBsID0gb2JqLmVsUG9zaXRpb24ueDtcbiAgICB2YXIgeGMgPSBvYmouZWxQb3NpdGlvbi54ICsgKG9iai5lbFdpZHRoIC8gMik7XG4gICAgdmFyIHljID0gb2JqLmVsUG9zaXRpb24ueSArIChvYmouZWxIZWlnaHQgLyAyKTtcblxuICAgIHZhciBkeCA9IDA7XG4gICAgdmFyIGR5ID0gMDtcblxuICAgIC8vIGlmIHRoZSBtb3VzZSBpcyB3aXRoaW4gMjAwIHBpeGVscyBvZiB0aGUgb3V0ZXJ3aWR0aFxuICAgIGlmIChtb3VzZVkgPiB0IC0gb2JqLnByb3hpbWl0eSAmJiBtb3VzZVkgPCBiICsgb2JqLnByb3hpbWl0eSkge1xuXG4gICAgICAgIGlmIChtb3VzZVggKyBvYmoubWFyZ2luID4gbCAmJiBtb3VzZVggPCB4Yykge1xuICAgICAgICAgIGR4ID0gbW91c2VYIC0gbCArIG9iai5tYXJnaW47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1vdXNlWCAtIG9iai5tYXJnaW4gPCByICYmIG1vdXNlWCA+IHhjKSB7XG4gICAgICAgICAgZHggPSBtb3VzZVggLSByIC0gb2JqLm1hcmdpbjtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgaWYgKG1vdXNlWCA+IGwgLSBvYmoucHJveGltaXR5ICYmIG1vdXNlWCA8IHIgKyBvYmoucHJveGltaXR5KSB7XG5cbiAgICAgICAgaWYgKG1vdXNlWSArIG9iai5tYXJnaW4gPiB0ICYmIG1vdXNlWSA8IHljKSB7XG4gICAgICAgICAgZHkgPSBtb3VzZVkgLSB0ICsgb2JqLm1hcmdpbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobW91c2VZIC0gb2JqLm1hcmdpbiA8IGIgJiYgbW91c2VZID4geWMpIHtcbiAgICAgICAgICBkeSA9IG1vdXNlWSAtIGIgLSBvYmoubWFyZ2luO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBvYmouZWwuc3R5bGUudHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUoXCIrZHgrXCJweCwgXCIrZHkrXCJweClcIjtcbiAgfVxuXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgZnVuY3Rpb24oZSkge1xuICAgIGlmICghY29uZmlnLm5vTW92ZSkge1xuICAgICAgb2JqLm1vdmVCdXR0b24oZS5jbGllbnRYLCBlLmNsaWVudFkpO1xuICAgIH1cbiAgfSlcbn1cblxuLy8gU2hhd24gV2hpbm5lcnkgc3RhY2sgb3ZlcmZsb3dcbmZ1bmN0aW9uIGdldFBvc2l0aW9uKGVsZW1lbnQpIHtcbiAgICB2YXIgeFBvc2l0aW9uID0gMDtcbiAgICB2YXIgeVBvc2l0aW9uID0gMDtcblxuICAgIHdoaWxlKGVsZW1lbnQpIHtcbiAgICAgICAgeFBvc2l0aW9uICs9IChlbGVtZW50Lm9mZnNldExlZnQgLSBlbGVtZW50LnNjcm9sbExlZnQgKyBlbGVtZW50LmNsaWVudExlZnQpO1xuICAgICAgICB5UG9zaXRpb24gKz0gKGVsZW1lbnQub2Zmc2V0VG9wIC0gZWxlbWVudC5zY3JvbGxUb3AgKyBlbGVtZW50LmNsaWVudFRvcCk7XG4gICAgICAgIGVsZW1lbnQgPSBlbGVtZW50Lm9mZnNldFBhcmVudDtcbiAgICB9XG5cbiAgICByZXR1cm4geyB4OiB4UG9zaXRpb24sIHk6IHlQb3NpdGlvbiB9O1xufVxuIl19
