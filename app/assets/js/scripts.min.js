/*!
 * fastshell
 * Fiercely quick and opinionated front-ends
 * https://HosseinKarami.github.io/fastshell
 * @author Hossein Karami
 * @version 1.0.5
 * Copyright 2019. MIT licensed.
 */
function cursorphobic(i,o){var t={};t.margin=0,t.proximity=0,t.animationDelay=.1,void 0!=o.margin&&(t.margin=o.margin),void 0!=o.proximity&&(t.proximity=o.proximity),void 0!=o.animationDelay&&(t.animationDelay=o.animationDelay),t.el=document.querySelector(i),t.el.style.transition=t.el.style.transition+" transform "+t.animationDelay+"s",t.elPosition=getPosition(t.el),t.elWidth=t.el.offsetWidth,t.elHeight=t.el.offsetHeight,t.moveButton=function(i,o){xPos.innerHTML="X: "+i,yPos.innerHTML="Y: "+o;var e=t.elPosition.y,n=t.elPosition.x+t.elWidth,r=t.elPosition.y+t.elHeight,l=t.elPosition.x,a=t.elPosition.x+t.elWidth/2,m=t.elPosition.y+t.elHeight/2,s=0,y=0;o>e-t.proximity&&o<r+t.proximity&&(i+t.margin>l&&i<a&&(s=i-l+t.margin),i-t.margin<n&&i>a&&(s=i-n-t.margin)),i>l-t.proximity&&i<n+t.proximity&&(o+t.margin>e&&o<m&&(y=o-e+t.margin),o-t.margin<r&&o>m&&(y=o-r-t.margin)),t.el.style.transform="translate("+s+"px, "+y+"px)"},document.addEventListener("mousemove",function(i){t.moveButton(i.clientX,i.clientY)})}function getPosition(i){for(var o=0,t=0;i;)o+=i.offsetLeft-i.scrollLeft+i.clientLeft,t+=i.offsetTop-i.scrollTop+i.clientTop,i=i.offsetParent;return{x:o,y:t}}var xPos=document.querySelector("#xpos"),yPos=document.querySelector("#ypos");
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMuanMiXSwibmFtZXMiOlsiY3Vyc29ycGhvYmljIiwic2VsZWN0b3IiLCJjb25maWciLCJvYmoiLCJtYXJnaW4iLCJwcm94aW1pdHkiLCJhbmltYXRpb25EZWxheSIsInVuZGVmaW5lZCIsImVsIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwic3R5bGUiLCJ0cmFuc2l0aW9uIiwiZWxQb3NpdGlvbiIsImdldFBvc2l0aW9uIiwiZWxXaWR0aCIsIm9mZnNldFdpZHRoIiwiZWxIZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJtb3ZlQnV0dG9uIiwibW91c2VYIiwibW91c2VZIiwieFBvcyIsImlubmVySFRNTCIsInlQb3MiLCJ0IiwieSIsInIiLCJ4IiwiYiIsImwiLCJ4YyIsInljIiwiZHgiLCJkeSIsInRyYW5zZm9ybSIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwiY2xpZW50WCIsImNsaWVudFkiLCJlbGVtZW50IiwieFBvc2l0aW9uIiwieVBvc2l0aW9uIiwib2Zmc2V0TGVmdCIsInNjcm9sbExlZnQiLCJjbGllbnRMZWZ0Iiwib2Zmc2V0VG9wIiwic2Nyb2xsVG9wIiwiY2xpZW50VG9wIiwib2Zmc2V0UGFyZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUdBLFFBQUFBLGNBQUFDLEVBQUFDLEdBQ0EsR0FBQUMsS0FDQUEsR0FBQUMsT0FBQSxFQUNBRCxFQUFBRSxVQUFBLEVBQ0FGLEVBQUFHLGVBQUEsR0FFQUMsUUFBQUwsRUFBQUUsU0FBQUQsRUFBQUMsT0FBQUYsRUFBQUUsUUFDQUcsUUFBQUwsRUFBQUcsWUFBQUYsRUFBQUUsVUFBQUgsRUFBQUcsV0FDQUUsUUFBQUwsRUFBQUksaUJBQUFILEVBQUFHLGVBQUFKLEVBQUFJLGdCQUVBSCxFQUFBSyxHQUFBQyxTQUFBQyxjQUFBVCxHQUNBRSxFQUFBSyxHQUFBRyxNQUFBQyxXQUFBVCxFQUFBSyxHQUFBRyxNQUFBQyxXQUFBLGNBQUFULEVBQUFHLGVBQUEsSUFDQUgsRUFBQVUsV0FBQUMsWUFBQVgsRUFBQUssSUFDQUwsRUFBQVksUUFBQVosRUFBQUssR0FBQVEsWUFDQWIsRUFBQWMsU0FBQWQsRUFBQUssR0FBQVUsYUFFQWYsRUFBQWdCLFdBQUEsU0FBQUMsRUFBQUMsR0FDQUMsS0FBQUMsVUFBQSxNQUFBSCxFQUNBSSxLQUFBRCxVQUFBLE1BQUFGLENBRUEsSUFBQUksR0FBQXRCLEVBQUFVLFdBQUFhLEVBQ0FDLEVBQUF4QixFQUFBVSxXQUFBZSxFQUFBekIsRUFBQVksUUFDQWMsRUFBQTFCLEVBQUFVLFdBQUFhLEVBQUF2QixFQUFBYyxTQUNBYSxFQUFBM0IsRUFBQVUsV0FBQWUsRUFDQUcsRUFBQTVCLEVBQUFVLFdBQUFlLEVBQUF6QixFQUFBWSxRQUFBLEVBQ0FpQixFQUFBN0IsRUFBQVUsV0FBQWEsRUFBQXZCLEVBQUFjLFNBQUEsRUFFQWdCLEVBQUEsRUFDQUMsRUFBQSxDQUdBYixHQUFBSSxFQUFBdEIsRUFBQUUsV0FBQWdCLEVBQUFRLEVBQUExQixFQUFBRSxZQUVBZSxFQUFBakIsRUFBQUMsT0FBQTBCLEdBQUFWLEVBQUFXLElBQ0FFLEVBQUFiLEVBQUFVLEVBQUEzQixFQUFBQyxRQUVBZ0IsRUFBQWpCLEVBQUFDLE9BQUF1QixHQUFBUCxFQUFBVyxJQUNBRSxFQUFBYixFQUFBTyxFQUFBeEIsRUFBQUMsU0FLQWdCLEVBQUFVLEVBQUEzQixFQUFBRSxXQUFBZSxFQUFBTyxFQUFBeEIsRUFBQUUsWUFFQWdCLEVBQUFsQixFQUFBQyxPQUFBcUIsR0FBQUosRUFBQVcsSUFDQUUsRUFBQWIsRUFBQUksRUFBQXRCLEVBQUFDLFFBRUFpQixFQUFBbEIsRUFBQUMsT0FBQXlCLEdBQUFSLEVBQUFXLElBQ0FFLEVBQUFiLEVBQUFRLEVBQUExQixFQUFBQyxTQUtBRCxFQUFBSyxHQUFBRyxNQUFBd0IsVUFBQSxhQUFBRixFQUFBLE9BQUFDLEVBQUEsT0FHQXpCLFNBQUEyQixpQkFBQSxZQUFBLFNBQUFDLEdBQ0FsQyxFQUFBZ0IsV0FBQWtCLEVBQUFDLFFBQUFELEVBQUFFLFdBS0EsUUFBQXpCLGFBQUEwQixHQUlBLElBSEEsR0FBQUMsR0FBQSxFQUNBQyxFQUFBLEVBRUFGLEdBQ0FDLEdBQUFELEVBQUFHLFdBQUFILEVBQUFJLFdBQUFKLEVBQUFLLFdBQ0FILEdBQUFGLEVBQUFNLFVBQUFOLEVBQUFPLFVBQUFQLEVBQUFRLFVBQ0FSLEVBQUFBLEVBQUFTLFlBR0EsUUFBQXJCLEVBQUFhLEVBQUFmLEVBQUFnQixHQTNFQSxHQUFBcEIsTUFBQWIsU0FBQUMsY0FBQSxTQUNBYyxLQUFBZixTQUFBQyxjQUFBIiwiZmlsZSI6InNjcmlwdHMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHhQb3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3hwb3NcIik7XG52YXIgeVBvcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjeXBvc1wiKTtcblxuZnVuY3Rpb24gY3Vyc29ycGhvYmljKHNlbGVjdG9yLCBjb25maWcpIHtcbiAgdmFyIG9iaiA9IHt9O1xuICBvYmoubWFyZ2luID0gMDtcbiAgb2JqLnByb3hpbWl0eSA9IDA7XG4gIG9iai5hbmltYXRpb25EZWxheSA9IDAuMTtcblxuICBpZiAoY29uZmlnLm1hcmdpbiAhPSB1bmRlZmluZWQpIG9iai5tYXJnaW4gPSBjb25maWcubWFyZ2luO1xuICBpZiAoY29uZmlnLnByb3hpbWl0eSAhPSB1bmRlZmluZWQpIG9iai5wcm94aW1pdHkgPSBjb25maWcucHJveGltaXR5O1xuICBpZiAoY29uZmlnLmFuaW1hdGlvbkRlbGF5ICE9IHVuZGVmaW5lZCkgb2JqLmFuaW1hdGlvbkRlbGF5ID0gY29uZmlnLmFuaW1hdGlvbkRlbGF5O1xuXG4gIG9iai5lbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICBvYmouZWwuc3R5bGUudHJhbnNpdGlvbiA9IG9iai5lbC5zdHlsZS50cmFuc2l0aW9uICsgXCIgdHJhbnNmb3JtIFwiICsgb2JqLmFuaW1hdGlvbkRlbGF5ICsgXCJzXCI7XG4gIG9iai5lbFBvc2l0aW9uID0gZ2V0UG9zaXRpb24ob2JqLmVsKTtcbiAgb2JqLmVsV2lkdGggPSBvYmouZWwub2Zmc2V0V2lkdGg7XG4gIG9iai5lbEhlaWdodCA9IG9iai5lbC5vZmZzZXRIZWlnaHQ7XG5cbiAgb2JqLm1vdmVCdXR0b24gPSBmdW5jdGlvbihtb3VzZVgsIG1vdXNlWSkge1xuICAgIHhQb3MuaW5uZXJIVE1MID0gJ1g6ICcgKyBtb3VzZVg7XG4gICAgeVBvcy5pbm5lckhUTUwgPSAnWTogJyArIG1vdXNlWTtcblxuICAgIHZhciB0ID0gb2JqLmVsUG9zaXRpb24ueTtcbiAgICB2YXIgciA9IG9iai5lbFBvc2l0aW9uLnggKyBvYmouZWxXaWR0aDtcbiAgICB2YXIgYiA9IG9iai5lbFBvc2l0aW9uLnkgKyBvYmouZWxIZWlnaHQ7XG4gICAgdmFyIGwgPSBvYmouZWxQb3NpdGlvbi54O1xuICAgIHZhciB4YyA9IG9iai5lbFBvc2l0aW9uLnggKyAob2JqLmVsV2lkdGggLyAyKTtcbiAgICB2YXIgeWMgPSBvYmouZWxQb3NpdGlvbi55ICsgKG9iai5lbEhlaWdodCAvIDIpO1xuXG4gICAgdmFyIGR4ID0gMDtcbiAgICB2YXIgZHkgPSAwO1xuXG4gICAgLy8gaWYgdGhlIG1vdXNlIGlzIHdpdGhpbiAyMDAgcGl4ZWxzIG9mIHRoZSBvdXRlcndpZHRoXG4gICAgaWYgKG1vdXNlWSA+IHQgLSBvYmoucHJveGltaXR5ICYmIG1vdXNlWSA8IGIgKyBvYmoucHJveGltaXR5KSB7XG5cbiAgICAgICAgaWYgKG1vdXNlWCArIG9iai5tYXJnaW4gPiBsICYmIG1vdXNlWCA8IHhjKSB7XG4gICAgICAgICAgZHggPSBtb3VzZVggLSBsICsgb2JqLm1hcmdpbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobW91c2VYIC0gb2JqLm1hcmdpbiA8IHIgJiYgbW91c2VYID4geGMpIHtcbiAgICAgICAgICBkeCA9IG1vdXNlWCAtIHIgLSBvYmoubWFyZ2luO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBpZiAobW91c2VYID4gbCAtIG9iai5wcm94aW1pdHkgJiYgbW91c2VYIDwgciArIG9iai5wcm94aW1pdHkpIHtcblxuICAgICAgICBpZiAobW91c2VZICsgb2JqLm1hcmdpbiA+IHQgJiYgbW91c2VZIDwgeWMpIHtcbiAgICAgICAgICBkeSA9IG1vdXNlWSAtIHQgKyBvYmoubWFyZ2luO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtb3VzZVkgLSBvYmoubWFyZ2luIDwgYiAmJiBtb3VzZVkgPiB5Yykge1xuICAgICAgICAgIGR5ID0gbW91c2VZIC0gYiAtIG9iai5tYXJnaW47XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIG9iai5lbC5zdHlsZS50cmFuc2Zvcm0gPSBcInRyYW5zbGF0ZShcIitkeCtcInB4LCBcIitkeStcInB4KVwiO1xuICB9XG5cbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBmdW5jdGlvbihlKSB7XG4gICAgb2JqLm1vdmVCdXR0b24oZS5jbGllbnRYLCBlLmNsaWVudFkpO1xuICB9KVxufVxuXG4vLyBTaGF3biBXaGlubmVyeSBzdGFjayBvdmVyZmxvd1xuZnVuY3Rpb24gZ2V0UG9zaXRpb24oZWxlbWVudCkge1xuICAgIHZhciB4UG9zaXRpb24gPSAwO1xuICAgIHZhciB5UG9zaXRpb24gPSAwO1xuXG4gICAgd2hpbGUoZWxlbWVudCkge1xuICAgICAgICB4UG9zaXRpb24gKz0gKGVsZW1lbnQub2Zmc2V0TGVmdCAtIGVsZW1lbnQuc2Nyb2xsTGVmdCArIGVsZW1lbnQuY2xpZW50TGVmdCk7XG4gICAgICAgIHlQb3NpdGlvbiArPSAoZWxlbWVudC5vZmZzZXRUb3AgLSBlbGVtZW50LnNjcm9sbFRvcCArIGVsZW1lbnQuY2xpZW50VG9wKTtcbiAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQub2Zmc2V0UGFyZW50O1xuICAgIH1cblxuICAgIHJldHVybiB7IHg6IHhQb3NpdGlvbiwgeTogeVBvc2l0aW9uIH07XG59XG4iXX0=
